# Default values for hw-billing.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1


containerPort: 80

image:
  repository: nolife1349/billing-service:latest
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8002

ingress:
  enabled: true
  className: ""
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: $1
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: arch.homework
      paths:
        - path: "/otusapp/gorbunov(/billing/.*|/billing$)"
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
   limits:
     cpu: 200m
     memory: 512Mi
   requests:
     cpu: 200m
     memory: 512Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  enabled: true
  postgresqlUsername: user
  postgresqlPassword: passwd
  postgresqlDatabase: billing
  postgresqlSchema: public
  service:
    port: "5432"

servicemonitor:
  enabled: false
#nginx-ingress:
#  controller:
#    kind: DaemonSet
#    reportNodeInternalIp: true
#    daemonset:
#      useHostPort: true
#      hostPorts:
#        http: 80
#        https: 443
#    service:
#      type: NodePort
#    metrics:
#      enabled: true
#      serviceMonitor:
#        enabled: true
#
#prometheus-operator:
#  grafana:
#    adminPassword: pwd
#  prometheus:
#    prometheusSpec:
#      serviceMonitorSelectorNilUsesHelmValues: false
#      serviceMonitorSelector: { }
#      additionalScrapeConfigs:
#        - job_name: pg-exporter
#          scrape_interval: 1m
#          static_configs:
#            - targets: [ 'pg-exporter:80' ]
#
#
#prometheus-postgres-exporter:
#  config:
#    datasource:
#      host: pg-db
#      user: user
#      password: passwd
#      database: user_info